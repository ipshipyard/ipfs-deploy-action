name: 'Deploy to IPFS'
description: 'Merkleize and deploy static sites to IPFS with Storacha, with optional Pinata and Filebase pinning'
branding:
  icon: 'box'
  color: 'blue'

inputs:
  kubo-version:
    description: 'Kubo version used to merkleize, create CAR file, and pin https://dist.ipfs.tech/kubo/versions'
    default: 'v0.33.0'
    required: false
  path-to-deploy:
    description: 'Path to the directory containing the frontend build to merkleize into a CAR file and deploy to IPFS'
    required: true
  ipfs-add-options:
    description: 'Options to pass to `ipfs add` command of Kubo See https://docs.ipfs.tech/reference/kubo/cli/#ipfs-add'
    default: '--cid-version 1 --chunker size-1048576'
    required: false
  kubo-api-url:
    description: 'Kubo RPC API URL to pass to `ipfs --api`, e.g. `/dns/YOUR_DOMAIN/tcp/443/https`'
    required: false
  kubo-api-auth:
    description: 'Kubo RPC API auth secret to pass to `ipfs --api-auth`, e.g. `basic:hello:world` (defined as `AuthSecret` in `API.Authorizations` Kubo config)'
    required: false
  cluster-url:
    description: 'IPFS Cluster URL to pass to ipfs-cluster-ctl --host, e.g. /dnsaddr/...'
    required: false
  cluster-user:
    description: 'IPFS Cluster username used for basic http auth'
    required: false
  cluster-password:
    description: 'IPFS Cluster password used for basic http auth'
    required: false
  cluster-retry-attempts:
    description: 'Number of retry attempts for IPFS Cluster uploads'
    default: '3'
    required: false
  cluster-timeout-minutes:
    description: 'Timeout in minutes for each IPFS Cluster upload attempt'
    default: '5'
    required: false
  ipfs-cluster-ctl-version:
    description: 'IPFS Cluster CLI version to use'
    default: 'v1.1.2'
    required: false
  cluster-pin-expire-in:
    description: 'Time duration after which the pin will expire in IPFS Cluster (e.g. 720h for 30 days). Only supported by IPFS Cluster.'
    required: false
  pin-name:
    description: 'Custom name for the pin. If unset, defaults to "{repo-name}-{commit-sha-short}"'
    required: false
  storacha-key:
    description: 'Storacha base64 encoded key to use to sign UCAN invocations. Create one using `w3 key create --json`. See: https://github.com/storacha/w3cli#w3_principal'
    required: false
  storacha-proof:
    description: 'Storacha Base64 encoded proof UCAN with capabilities for the space `w3 delegation create did:key:DID_OF_KEY -c space/blob/add -c space/index/add -c filecoin/offer -c upload/add --base64`'
    required: false
  pinata-pinning-url:
    description: 'Pinata Pinning Service URL'
    default: 'https://api.pinata.cloud/psa'
  pinata-jwt-token:
    description: 'Pinata JWT token for authentication'
    required: false
  filebase-bucket:
    description: 'Filebase bucket name'
    required: false
  filebase-access-key:
    description: 'Filebase access key'
    required: false
  filebase-secret-key:
    description: 'Filebase secret key'
    required: false
  github-token:
    description: 'GitHub token for updating commit status and PR comments'
    required: true
  set-github-status:
    description: 'Set GitHub commit status with build CID. Use "true" or "false" (as strings)'
    default: 'true'
    required: false
  github-status-gw:
    description: 'Gateway URL to use for the commit status target_url. Defaults to `inbrowser.link`'
    default: 'inbrowser.link'
    required: false
  set-pr-comment:
    description: 'Set PR comments with IPFS deployment information. Use "true" or "false" (as strings)'
    default: 'true'
    required: false
  upload-car-artifact:
    description: 'Upload the CAR file as a GitHub artifact'
    default: 'true'
    required: false

outputs:
  cid:
    description: 'The IPFS CID of the uploaded content'
    value: ${{ steps.merkleize.outputs.cid }}

runs:
  using: 'composite'
  steps:
    - name: Validate action inputs
      shell: bash
      run: |
        # This checks if neither Storacha, IPFS Cluster, nor Kubo credentials are provided
        # It validates that at least one of the three credential sets is complete:
        # 1. Storacha: both key and proof must be set
        # 2. IPFS Cluster: url, user and password must all be set
        # 3. Kubo: api url and auth must both be set
        # If all credential sets are incomplete/empty, it will error
        if [[ -z "${{ inputs.storacha-key }}" || -z "${{ inputs.storacha-proof }}" ]] && [[ -z "${{ inputs.cluster-url }}" || -z "${{ inputs.cluster-user }}" || -z "${{ inputs.cluster-password }}" ]] && [[ -z "${{ inputs.kubo-api-url }}" || -z "${{ inputs.kubo-api-auth }}" ]]; then
          echo "::error::Either Storacha credentials (`storacha-key` and `storacha-proof`) or IPFS Cluster credentials (`cluster-url`, `cluster-user`, and `cluster-password`) or Kubo credentials (`kubo-api-url` and `kubo-api-auth`) must be configured. Note that Pinata can only be used in addition to the above providers/nodes, but not exclusively."
          exit 1
        fi

    - name: Setup Kubo CLI
      uses: ipfs/download-ipfs-distribution-action@v1
      with:
        name: kubo
        version: ${{ inputs.kubo-version }}

    - name: ipfs init
      shell: bash
      # ipfs init is required to use many of the ipfs commands
      run: |
        ipfs init

    - name: Merkleize into CAR file
      id: merkleize
      shell: bash
      run: |
        echo "ℹ️ Merkleizing ${{ inputs.path-to-deploy }} into CAR file"

        # Verify the directory exists
        if [ ! -d "${{ inputs.path-to-deploy }}" ]; then
          echo "::error::Directory '${{ inputs.path-to-deploy }}' does not exist or is not accessible"
          exit 1
        fi

        # Verify the directory is not empty
        if [ -z "$(ls -A ${{ inputs.path-to-deploy }})" ]; then
          echo "::error::Directory '${{ inputs.path-to-deploy }}' is empty"
          exit 1
        fi

        # Merkleize the directory into a CAR file
        CID=$(ipfs add ${{ inputs.ipfs-add-options }} -Q -r ${{ inputs.path-to-deploy }})
        ipfs dag export $CID > build.car

        # Verify that we got a valid CID
        if [ -z "$CID" ]; then
          echo "::error::Failed to extract CID from ipfs add output"
          exit 1
        fi

        echo "cid=$CID" >> "$GITHUB_OUTPUT"
        echo $CID
        echo "✅ Merkleized path: \`${{ inputs.path-to-deploy }}\` into CAR file with root CID \`$CID\`" >> $GITHUB_STEP_SUMMARY

    - name: CAR file artifact name
      if: ${{ inputs.upload-car-artifact != 'false' }}
      shell: bash
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | tr '/' '-')
        COMMIT_SHA="${{ github.event.pull_request.head.sha || github.sha }}"
        COMMIT_SHA_SHORT="${COMMIT_SHA:0:7}"
        echo "artifact_name=$REPO_NAME-$COMMIT_SHA_SHORT-${{ steps.merkleize.outputs.cid }}.car" >> "$GITHUB_ENV"

    - name: CAR file artifact upload
      if: ${{ inputs.upload-car-artifact != 'false' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_name }}
        path: build.car
        retention-days: 7
        if-no-files-found: error

    - name: Configure and upload CAR to Storacha
      if: ${{ inputs.storacha-key != '' && inputs.storacha-proof != ''}}
      shell: bash
      env:
        W3_PRINCIPAL: ${{ inputs.storacha-key }}
      run: |
        npm install -g @web3-storage/w3cli
        echo "ℹ️ Uploading CAR with CID ${{ steps.merkleize.outputs.cid }} to Storacha"
        w3 space add ${{ inputs.storacha-proof }}
        if ! w3 up --car build.car; then
          echo "::error::Failed to upload to Storacha"
          exit 1
        else
          echo "✅ Uploaded CAR with CID \`${{ steps.merkleize.outputs.cid }}\` to Storacha" >> $GITHUB_STEP_SUMMARY

          echo "### 🚀 Build Preview on IPFS ready" >> $GITHUB_STEP_SUMMARY
          echo "- 🔎 Commit: ${{ github.event.pull_request.head.sha || github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔏 CID: \`${{ steps.merkleize.outputs.cid }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Preview:" >> $GITHUB_STEP_SUMMARY
          echo "- [dweb.link](https://dweb.link/ipfs/${{ steps.merkleize.outputs.cid }})" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ inputs.storacha-key }}" && -n "${{ inputs.storacha-proof }}" ]]; then
            echo "- [w3s.link](https://w3s.link/ipfs/${{ steps.merkleize.outputs.cid }})" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- [inbrowser.link](https://inbrowser.link/ipfs/${{ steps.merkleize.outputs.cid }})" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload CAR to Kubo
      if: ${{ inputs.kubo-api-url != '' && inputs.kubo-api-auth != ''}}
      shell: bash
      env:
        KUBO_API_URL: ${{ inputs.kubo-api-url }}
        KUBO_API_AUTH: ${{ inputs.kubo-api-auth }}
      run: |
        echo "ℹ️ Uploading CAR with CID ${{ steps.merkleize.outputs.cid }} to Kubo"
        if [ -n "${ACTIONS_RUNNER_DEBUG}" ]; then
          export GOLOG_LOG_LEVEL='debug'
        fi
        ipfs dag import build.car --api ${KUBO_API_URL} --api-auth ${KUBO_API_AUTH}

        echo "✅ Uploaded CAR with CID ${{ steps.merkleize.outputs.cid }} to Kubo" >> $GITHUB_STEP_SUMMARY

    - name: Setup IPFS Cluster CLI
      if: ${{ inputs.cluster-url != ''}}
      uses: ipfs/download-ipfs-distribution-action@v1
      with:
        name: ipfs-cluster-ctl
        version: ${{ inputs.ipfs-cluster-ctl-version }}

    - name: Set pin name
      id: set-pin-name
      shell: bash
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | tr '/' '-')
        COMMIT_SHA="${{ github.event.pull_request.head.sha || github.sha }}"
        COMMIT_SHA_SHORT="${COMMIT_SHA:0:7}"

        # Set the pin name - either use the input or default to repo-commit format
        if [ -n "${{ inputs.pin-name }}" ]; then
          PIN_NAME="${{ inputs.pin-name }}"
        else
          PIN_NAME="${REPO_NAME}-${COMMIT_SHA_SHORT}"
        fi

        echo "pin_name=${PIN_NAME}" >> "$GITHUB_ENV"
        echo "Using pin name: ${PIN_NAME}"

    - name: Upload CAR to IPFS Cluster
      if: ${{ inputs.cluster-url != '' && inputs.cluster-user != '' && inputs.cluster-password != '' }}
      shell: bash
      env:
        IPFS_CLUSTER_URL: ${{ inputs.cluster-url }}
        IPFS_CLUSTER_USER: ${{ inputs.cluster-user }}
        IPFS_CLUSTER_PASSWORD: ${{ inputs.cluster-password }}
      run: |
        echo "ℹ️ Uploading CAR with CID ${{ steps.merkleize.outputs.cid }} to IPFS Cluster"

        # run in a loop and retry
        attempt=1
        while true; do
          echo "Attempt #$attempt"

          # Make sure we don't loop forever
          if [ $attempt -eq ${{ inputs.cluster-retry-attempts }} ]; then
            echo "❌ Failed to upload CAR with CID ${{ steps.merkleize.outputs.cid }} to IPFS Cluster" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          if [[ -n "${ACTIONS_RUNNER_DEBUG}" || $attempt -ge 2 ]]; then
            export GOLOG_LOG_LEVEL='debug'
          fi

          # the --local flag will add the CAR to the local IPFS daemon of the peer receiving the request, but not wait for it to be fully replicated.
          timeout ${{ inputs.cluster-timeout-minutes }}m ipfs-cluster-ctl \
            --enc=json \
            --host ${IPFS_CLUSTER_URL} \
            --basic-auth ${IPFS_CLUSTER_USER}:${IPFS_CLUSTER_PASSWORD} \
            add --format=car \
            --local \
            --name "${pin_name}" \
            ${{ inputs.cluster-pin-expire-in != '' && format('--expire-in {0}', inputs.cluster-pin-expire-in) || '' }} \
            build.car && {
              echo "✅ Uploaded CAR with CID ${{ steps.merkleize.outputs.cid }} to IPFS Cluster" >> $GITHUB_STEP_SUMMARY
              if [[ -n "${{ inputs.cluster-pin-expire-in }}" ]]; then
                echo "⏰ IPFS Cluster Pin is set to expire in ${{ inputs.cluster-pin-expire-in }}" >> $GITHUB_STEP_SUMMARY
              fi
              exit 0
            }

          echo "Attempt #$attempt failed, retrying in 5 seconds..."
          attempt=$((attempt + 1))
          sleep 5
        done


    - name: Upload CAR to Filebase
      if: ${{ inputs.filebase-access-key != '' }}
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.filebase-access-key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.filebase-secret-key }}
        FILEBASE_BUCKET: ${{ inputs.filebase-bucket }}
      run: |
        echo "ℹ️ Uploading CAR with CID ${{ steps.merkleize.outputs.cid }} to Filebase"
        aws --endpoint https://s3.filebase.com s3 cp build.car s3://${FILEBASE_BUCKET} --metadata 'import=car'
        if [ $? -eq 0 ]; then
          echo "✅ Uploaded CAR with CID \`${{ steps.merkleize.outputs.cid }}\` to Filebase" >> $GITHUB_STEP_SUMMARY
        else
          echo "::error::Failed to upload to Filebase"
          exit 1
        fi

    - name: Pin CID to Pinata
      if: ${{ inputs.pinata-jwt-token != ''}}
      shell: bash
      run: |
        ipfs pin remote service add pinata "${{ inputs.pinata-pinning-url }}" ${{ inputs.pinata-jwt-token }}
        ipfs pin remote add --service=pinata --background --name="${pin_name}" ${{ steps.merkleize.outputs.cid }}
        echo "✅ Pinned CID \`${{ steps.merkleize.outputs.cid }}\` to Pinata" >> $GITHUB_STEP_SUMMARY

    - name: Set GitHub commit status
      if: ${{ inputs.set-github-status == 'true' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const cid = '${{ steps.merkleize.outputs.cid }}';

          // Determine the correct SHA based on the event type
          let sha;
          if (context.eventName === 'workflow_run') {
            // For workflow_run events triggered by PRs, use the PR's head SHA
            sha = context.payload.workflow_run.head_sha;
          } else if (context.eventName === 'pull_request' || context.eventName === 'pull_request_target') {
            // For PR events, use the head SHA
            sha = context.payload.pull_request.head.sha;
          } else {
            // For push events, use the commit SHA
            sha = context.sha;
          }

          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: sha,
            state: 'success',
            target_url: `https://${{ inputs.github-status-gw }}/ipfs/${cid}`,
            description: `CID: ${cid}`,
            context: 'IPFS'
          });

    - name: Get PR number for workflow_run
      if: ${{ inputs.set-pr-comment == 'true' && github.event_name == 'workflow_run' }}
      id: pr-number
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // For workflow_run events, we need to find the PR number from the workflow run
          if (context.payload.workflow_run.event === 'pull_request') {
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.payload.workflow_run.head_repository.owner.login}:${context.payload.workflow_run.head_branch}`,
              state: 'open'
            });
            
            if (pulls.data.length > 0) {
              // Try to find the PR whose head SHA matches the workflow run's head_sha
              const matchingPr = pulls.data.find(pr => pr.head.sha === context.payload.workflow_run.head_sha);
              
              if (matchingPr) {
                core.setOutput('number', matchingPr.number);
                core.setOutput('sha', matchingPr.head.sha);
              } else {
                // Fallback: use the first PR, but warn in the summary
                core.setOutput('number', pulls.data[0].number);
                core.setOutput('sha', context.payload.workflow_run.head_sha);
                core.warning(`Multiple PRs found for branch ${context.payload.workflow_run.head_branch}, but none matched head_sha. Using the first PR (#${pulls.data[0].number}).`);
              }
            } else {
              core.warning(`No open PRs found for branch ${context.payload.workflow_run.head_branch} from ${context.payload.workflow_run.head_repository.owner.login}`);
            }
          }

    - name: Find Comment to update
      if: ${{ inputs.set-pr-comment == 'true' && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target' || (github.event_name == 'workflow_run' && steps.pr-number.outputs.number)) }}
      uses: peter-evans/find-comment@v3
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number || steps.pr-number.outputs.number }}
        comment-author: 'github-actions[bot]'
        body-includes: '🚀 Build'
        token: ${{ inputs.github-token }}

    - name: Create or update comment
      if: ${{ inputs.set-pr-comment == 'true' && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target' || (github.event_name == 'workflow_run' && steps.pr-number.outputs.number)) }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ inputs.github-token }}
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number || steps.pr-number.outputs.number }}
        body: |
          ### 🚀 Build Preview on IPFS ready
          - 🔎 Commit: ${{ github.event.pull_request.head.sha || steps.pr-number.outputs.sha || github.sha }}
          - 🔏 CID `${{ steps.merkleize.outputs.cid }}`
          - 📦 Preview:
            - [dweb.link](https://dweb.link/ipfs/${{ steps.merkleize.outputs.cid }})
            ${{ inputs.storacha-key && format('- [w3s.link](https://w3s.link/ipfs/{0})', steps.merkleize.outputs.cid) || '' }}
            - [inbrowser.link](https://inbrowser.link/ipfs/${{ steps.merkleize.outputs.cid }})
        edit-mode: replace
